
// MessageManagerDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "MessageManager.h"
#include "MessageManagerDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialog
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()


// CMessageManagerDlg 对话框
CMessageManagerDlg::CMessageManagerDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CMessageManagerDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMessageManagerDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_MESSAGE_TREE, m_MessageTreeCtrl);
	DDX_Control(pDX, IDC_PROPERTY_LIST, m_PropertyListCtrl);
}

BEGIN_MESSAGE_MAP(CMessageManagerDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	//}}AFX_MSG_MAP
	ON_COMMAND(ID_TREE_APPEND, &CMessageManagerDlg::OnTreeAppend)
	ON_COMMAND(ID_TREE_DELETE, &CMessageManagerDlg::OnTreeDelete)
	ON_NOTIFY(NM_RCLICK, IDC_MESSAGE_TREE, &CMessageManagerDlg::OnNMRClickMessageTree)
	ON_NOTIFY(TVN_ENDLABELEDIT, IDC_MESSAGE_TREE, &CMessageManagerDlg::OnTvnEndlabeleditMessageTree)
	ON_NOTIFY(TVN_BEGINLABELEDIT, IDC_MESSAGE_TREE, &CMessageManagerDlg::OnTvnBeginlabeleditMessageTree)
	ON_COMMAND_RANGE(ID_INT8, ID_STRUCT, &CMessageManagerDlg::OnAppendProperty )
END_MESSAGE_MAP()


// CMessageManagerDlg 消息处理程序

BOOL CMessageManagerDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	ShowWindow(SW_NORMAL);

	// TODO: 在此添加额外的初始化代码
	m_Bitmap.LoadBitmap( IDB_TREEIMAGE );
	m_ImageList.Create( 16, 16, ILC_COLOR24, 7, 1 );
	m_ImageList.Add( &m_Bitmap, RGB(0,0,0) );
	m_MessageTreeCtrl.SetImageList( &m_ImageList, TVSIL_NORMAL );

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CMessageManagerDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CMessageManagerDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CMessageManagerDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CMessageManagerDlg::OnTreeAppend()
{
	// TODO: 在此添加命令处理程序代码
	HTREEITEM hItem = m_MessageTreeCtrl.GetSelectedItem();

	HTREEITEM hInsert = m_MessageTreeCtrl.InsertItem( _T(""), 3, 3, hItem?hItem:TVI_ROOT );
	m_MessageTreeCtrl.SelectItem( hInsert );
	m_MessageTreeCtrl.EditLabel( hInsert );
}

void CMessageManagerDlg::OnTreeDelete()
{
	// TODO: 在此添加命令处理程序代码
	m_MessageTreeCtrl.DeleteItem( m_MessageTreeCtrl.GetSelectedItem() );
}

void CMessageManagerDlg::OnNMRClickMessageTree(NMHDR *pNMHDR, LRESULT *pResult)
{
	// TODO: 在此添加控件通知处理程序代码
	*pResult = 0;
	
	CMenu Menu;

	CPoint ptCursor, ptTreeHit;
	GetCursorPos( &ptCursor );

	ptTreeHit = ptCursor;
	m_MessageTreeCtrl.ScreenToClient( &ptTreeHit );
	HTREEITEM hItem = m_MessageTreeCtrl.HitTest( ptTreeHit );
	m_MessageTreeCtrl.SelectItem( hItem );

	Menu.LoadMenu( IDR_MENU_TREEPOP );
	CMenu *pSub = Menu.GetSubMenu( 0 );

	pSub->EnableMenuItem( ID_TREE_DELETE, hItem?MF_ENABLED:MF_DISABLED|MF_GRAYED );
	pSub->EnableMenuItem( ID_TREE_APPEND, hItem?MF_DISABLED|MF_GRAYED:MF_ENABLED );

	pSub->TrackPopupMenu( TPM_LEFTALIGN, ptCursor.x, ptCursor.y, this );

}

void CMessageManagerDlg::OnTvnEndlabeleditMessageTree(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMTVDISPINFO pTVDispInfo = reinterpret_cast<LPNMTVDISPINFO>(pNMHDR);

	// TODO: 在此添加控件通知处理程序代码
	if( pTVDispInfo->item.pszText )
	{
		m_MessageTreeCtrl.SetItemText( pTVDispInfo->item.hItem, pTVDispInfo->item.pszText );
		*pResult = TRUE;
	}
	else
	{
		*pResult = FALSE;
	}
}

void CMessageManagerDlg::OnTvnBeginlabeleditMessageTree(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMTVDISPINFO pTVDispInfo = reinterpret_cast<LPNMTVDISPINFO>(pNMHDR);
	// TODO: 在此添加控件通知处理程序代码

	*pResult = 0;
}
BOOL CMessageManagerDlg::PreTranslateMessage(MSG* pMsg)
{
	// TODO: 在此添加专用代码和/或调用基类
	if( pMsg->message >= WM_KEYFIRST && pMsg->message <= WM_KEYLAST )
	{
		if( pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_RETURN )
		{
			m_MessageTreeCtrl.EndEditLabelNow(FALSE);
			return TRUE;
		}
		else if( pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_ESCAPE )
		{
			m_MessageTreeCtrl.EndEditLabelNow(TRUE);
			return TRUE;
		}
	}

	return CDialog::PreTranslateMessage(pMsg);
}

void CMessageManagerDlg::OnAppendProperty( UINT nID )
{
	// TODO: 在此添加命令处理程序代码
	HTREEITEM hItem = m_MessageTreeCtrl.GetSelectedItem();

	HTREEITEM hInsert = m_MessageTreeCtrl.InsertItem( _T(""), 5, 5, hItem?hItem:TVI_ROOT );
	m_MessageTreeCtrl.SelectItem( hInsert );
	m_MessageTreeCtrl.EditLabel( hInsert );
}
