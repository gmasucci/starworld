#pragma once

#ifndef _LOGGER_H
#define _LOGGER_H
#pragma warning( disable:4251 )
#ifdef TOOLLIB_EXPORTS
#define TOOLLIB_API __declspec(dllexport)
#else
#define TOOLLIB_API __declspec(dllimport)
#endif	//TOOLLIB_EXPORTS
#include <list>
#include "defines.h"
#include "critical_lock.h"

class CLoggerAdapter;
class TOOLLIB_API CLogger
{
private:
	CLogger( LPCTSTR szLoggerName );
	~CLogger(void);

public:
	enum logger_mode{ normal, pause, ignore };
	//--------------------------------------------------------------------------------------------------------//
	// 取得日志实例
	// szLogger		:	实例名
	//--------------------------------------------------------------------------------------------------------//
	static CLogger* GetInstance( LPCTSTR szLogger );

	//--------------------------------------------------------------------------------------------------------//
	// 设置日志输出模式
	//--------------------------------------------------------------------------------------------------------//
	static VOID SetLoggerMode( logger_mode en_mode );

	//--------------------------------------------------------------------------------------------------------//
	// 日志实例是否存在
	// szLogger		:	实例名
	//--------------------------------------------------------------------------------------------------------//
	static bool	Have( LPCTSTR szLogger );

	//--------------------------------------------------------------------------------------------------------//
	// 清除日至
	// szLogger		:	实例名
	//--------------------------------------------------------------------------------------------------------//
	static void Clear( LPCTSTR szLogger );

	//--------------------------------------------------------------------------------------------------------//
	// 清除所有日至
	//--------------------------------------------------------------------------------------------------------//
	static void ClearAll();

	//--------------------------------------------------------------------------------------------------------//
	// 添加一个日至适配器
	// pAdapter		:	适配器指针
	//--------------------------------------------------------------------------------------------------------//
	bool AddAdapter( CLoggerAdapter* pAdapter );

	//--------------------------------------------------------------------------------------------------------//
	// 删除一个适配器
	// szAdapterName	:	适配器名
	//--------------------------------------------------------------------------------------------------------//
	CLoggerAdapter* RemoveAdapter( LPCTSTR szAdapterName );

	//--------------------------------------------------------------------------------------------------------//
	// 写日至
	// szBuffer		:	日至缓冲区，由用户提供
	// size			:	缓冲区大小
	// fmt			:	格式串
	// ...			:	参数列表
	// return		:	写入的字符数
	//--------------------------------------------------------------------------------------------------------//
	int WriteLog( LPTSTR szBuffer, size_t nSize, LPCTSTR szFmt, ... );

	//--------------------------------------------------------------------------------------------------------//
	// 写日至
	// szBuffer		:	日至缓冲区，由用户提供
	// ...			:	参数列表
	// return		:	写入的字符数
	// remark		:	小心，不能写如果长的字符，255个字符刚好。
	//--------------------------------------------------------------------------------------------------------//
	int WriteLog( LPCTSTR szFmt, ... );

	//--------------------------------------------------------------------------------------------------------//
	// 写日至
	// szLog		:	日志串
	// nSize		:	串长度
	// return		:	写入的字符数
	//--------------------------------------------------------------------------------------------------------//
	int WriteLog( size_t nSize, LPCTSTR szLog );

	//--------------------------------------------------------------------------------------------------------//
	// 设置日志输出模式
	//--------------------------------------------------------------------------------------------------------//
	VOID SetMode( logger_mode en_mode );

	
protected:
	//--------------------------------------------------------------------------------------------------------//
	// 分发日至到适配器
	// szLog		:	日志串
	// nSize		:	串长度
	//--------------------------------------------------------------------------------------------------------//
	void DispatchLog( LPCTSTR szLog, size_t nSize );

private:
	struct	IMPL;
	IMPL*	m_pImpl;

	_string						m_strLoggerName;

	class logobj
	{
	public:
		explicit logobj(): m_pLog( NULL ){}
		explicit logobj( CLogger* pLog ): m_pLog( pLog ){}
		explicit logobj( const logobj& obj ){ m_pLog = obj.m_pLog; }

		~logobj();
		CLogger* operator=( CLogger* pLog ){ m_pLog = pLog;	return m_pLog; }
		CLogger* operator->()const{ return m_pLog; }
		operator CLogger*()const{	return m_pLog; }

	private:
		CLogger* m_pLog;
	};
};

#endif // _LOGGER_H