#define		NG2C_REQUEST_SERVERINFO		0x01   //请求gameserver的服务器信息
#define		NG2C_UPDATE_GAMESERVER_INFO	0x02   //定时更新centerserver上的gameserver信息
#define		NS2S_REQUEST_GAMESERVER_INFO_ID	0x01   //请求一个gameserver信息
#define		NS2S_RES_GAMESERVER_INFO_ID	0x02   //回复一个gameserver信息
#define		NS2S_RES_ERROR_INFO_ID		0x03   //回复一个错误信息
#define		NS2C_RES_GAMESERVER_INFO_ID	0x81    //回复gameserver ip信息

#define		NG2C_NETWORK_MSG_TYPE	0x30
#define		NG2C_SYSTEM_MSG_TYPE		0x31
#define		NG2C_PLAYER_MSG_TYPE		0x32 
#define		NG2C_ROOM_MSG_TYPE		0x33
#define		NG2C_LOBBY_MSG_TYPE		0x34
#define		NG2H_LOGIC_MSG_TYPE		0x35
#define		NG2C_FRIEND_MSG_TYPE		0x36
#define		NG2C_CHANNEL_MSG_TYPE		0x37
#define		NG2C_PERSON_SPACE_MSG_TYPE	0x38
#define		NG2C_SHOP_MSG_TYPE		0x39
#define  	NG2C_3DLOBBY_MSG_TYPE	0x3a
#define  	NG2C_MAP_MSG_TYPE		0x3b
#define		NG2C_NPC_MSG_TYPE		0x3c
#define		NG2C_TEAM_MSG_TYPE		0x3d
#define 	NG2C_DEPOT_MSG_TYPE  0x3e

// 返回验证信息
message NG2C_VerifiedReturn( NG2C_SYSTEM_MSG_TYPE, NG2C_VERIFIED_RESULT )
{
	_byte		verified_result;
	enum
	{
		VERIFIED_SUCCESS,
		ACCOUNT_VERIFIED_FAILED,
		MESSAGE_VERSION_ERROR,
	};
};


// 读档失败
message NG2C_ReadArchiveFail( NG2C_SYSTEM_MSG_TYPE, NG2C_READ_ARCHIVE_FAIL )
{
};

// 角色详细信息
message NG2C_RoleDetailInfo( NG2C_SYSTEM_MSG_TYPE, NG2C_ROLE_DETAIL_INFO )
{
	
	// 角色名字
	_string		name;
	// 角色列表索引
	_byte		index;													
	// 角色性别
	_byte		sex;														
	// 角色基本形象
	_uint16		avatar_id[MAX_AVATAR_COUNT];
	// 速度
	_byte 		speed;													
	// 耐力
	_byte		stamina;												
	// 攻击 
	_byte 		attack;													
	// 防御
	_byte 		defence;												
	// 运气
	_byte 		luck;														
	// 角色成就 
	_uint32 		fruition;												
	// 角色声望 
	_uint32 		prestige;												
	// 累计个人模式赢的次数
	_uint16 single_win_count;								
	// 累计个人模式输的次数
	_uint16 single_lose_count;								
	// 累计组队模式赢的次数
	_uint16 team_win_count;									
	// 累计组队模式输的次数
	_uint16 team_lose_count;									
	// 累计逃跑次数
	_uint16 run_away_count;									
	// 角色等级 
	_uint16 grade;														
	// 角色当前等级下累计经验
	_uint32 cur_grade_total_experience;	
	// 当前等级下最大累积经验
	_uint32 cur_grade_max_total_experience;									
	// 总游戏币
	_uint32 total_game_money;	
	// 总金币数
	_uint32 total_game_coin;								
	struct wareinfo
	{
		// 物品类型ID
		_uint32 nWareTypeID;  
		// 耐久度			
		_uint32 nCurST;	
		// (以f分为单位)
		_uint32 nCurTimeDroit;
		// 当前队列数量
		_uint32 nCurPileupNumber;
		// 所在页中的位置信息
		_uint16 nPosIdx;
		// 类型ID， 比如武器、装备、道具、材料
		_byte 	nTypeID;
		// 0: 背包中; 1: 正在使用中；
		_byte 	bUsing;
		// 物品使用模式
		// 计算过的数据 比如剩余的时间/剩余的个数/目前的耐久度
		// 物品的具体类型ID
		// 是否使用天权 
		bool bUseTimeDroit;
		// 是否使用耐久度
		bool bUseST;
		// 是否使用堆列 
		bool bUsePileup;
	};
	vector< wareinfo > wares;
};

// 返回角色列表
message NG2C_RoleInfoList( NG2C_SYSTEM_MSG_TYPE, NG2C_ROLE_INFO_LIST )
{
	struct	roleinfo
	{
		// 角色成就 
		_uint32 fruition;												
		// 角色声望 
		_uint32 prestige;												
		// 角色当前等级下累计经验
		_uint32 cur_grade_total_experience;	
		// 当前等级下最大累积经验
		_uint32 cur_grade_max_total_experience;									
		// 总游戏币
		_uint32 total_game_money;	
		// 总金币数
		_uint32 total_game_coin;									
		// 累计个人模式赢的次数
		_uint16 single_win_count;								
		// 累计个人模式输的次数
		_uint16 single_lose_count;								
		// 累计组队模式赢的次数
		_uint16 team_win_count;									
		// 累计组队模式输的次数
		_uint16 team_lose_count;									
		// 累计逃跑次数
		_uint16 run_away_count;									
		// 角色等级 
		_uint16 grade;														
		// 角色名字
		_string	name;
		// 角色列表索引
		_byte	index;													
		// 角色性别
		_byte	sex;														
		// 角色基本形象
		_uint16	avatar_id[MAX_AVATAR_COUNT]; 		
		// 速度
		_byte 	speed;
		// 耐力
		_byte	stamina;
		// 攻击 
		_byte 	attack;
		// 防御
		_byte 	defence;
		// 运气
		_byte 	luck;
	};
	vector< roleinfo > roles;
};

// 创建角色成功
message NG2C_CreateRoleSuccess( NG2C_SYSTEM_MSG_TYPE, NG2C_CREATE_ROLE_SUCCESS )
{
	// 创建的角色在列表中的索引
	_uint32	role_idx;
	// 角色名字 
	_string		name;
	// 角色列表索引 
	_byte		index;
	// 角色性别 
	_byte		sex;
	// 角色基本形象 
	_uint16		avatar_id[MAX_AVATAR_COUNT];
	// 速度 
	_byte		speed;
	// 耐力 
	_byte		stamina;
	// 攻击 
	_byte		attack;
	// 防御 
	_byte		defence;
	// 运气 
	_byte		luck;
	// 角色成就 
	_uint32		fruition;
	// 角色声望 
	_uint32		prestige;
	// 累计个人模式赢的次数 
	_uint16		single_win_count;
	// 累计个人模式输的次数 
	_uint16		single_lose_count;
	// 累计组队模式赢的次数 
	_uint16		team_win_count;
	// 累计组队模式输的次数 
	_uint16		team_lose_count;
	// 累计逃跑次数 
	_uint16		run_away_count;
	// 角色等级 
	_uint16		grade;
	// 角色当前等级下累计经验 
	_uint32		cur_grade_total_experience;
	// 当前等级下最大累积经验 
	_uint32		cur_grade_max_total_experience;
	// 总游戏币 
	_uint32		total_game_money;
	// 总金币数 
	_uint32		total_game_coin;

	struct	wareinfo
	{
		// 类型ID， 比如武器、装备、道具、材料 
		_byte	nTypeID;
		// 所在页中的位置信息 
		_uint16	nPosIdx;
		// 0: 背包中 1: 正在使用中； 
		_byte	bUsing;
		// 物品类型ID 
		_uint32	nWareTypeID;
		// 物品使用模式 
		// 计算过的数据 比如剩余的时间/剩余的个数/目前的耐久度 
		// 物品的具体类型ID 
		// 是否使用天权 
		bool	bUseTimeDroit;
		// (以f分为单位) 
		_uint32	nCurTimeDroit;
		// 是否使用耐久度 
		bool	bUseST;
		// 耐久度 
		_uint32	nCurST;
		// 是否使用堆列 
		bool	bUsePileup;
		// 当前队列数量 
		_uint32	nCurPileupNumber;
	};
	vector< wareinfo > wares;
};

// 创建角色失败
message NG2C_CreateRoleFailed( NG2C_SYSTEM_MSG_TYPE, NG2C_CREATE_ROLE_FAILED )
{
	_string	nickname;
	_uint32	reason;
	enum
	{
		ROLE_ALREADY_EXITS,
		NICKNAME_TOO_LONG,
		NICKNAME_NO_lAW_WORD,
	};
};

message NG2C_DeleteRoleResult( NG2C_SYSTEM_MSG_TYPE, NG2C_DELETE_ROLE_RESULT )
{
	bool	bSuccess;
	_uint32	reason;
	enum
	{
		DELETE_ROLE_SUCCESS,
		DELETE_ROLE_NOT_EXITS,
	};
};

// 返回大区列表
message NG2C_RegionInfo( NG2C_SYSTEM_MSG_TYPE, NG2C_GAME_REGION_INFO )
{
	struct	regioninfo
	{
		_string		region_name;
		_byte		index;
		_byte		capacity;
		_byte		load;
	};
	vector< regioninfo > regions;
};

// 返回lobbyinfo列表
message NG2C_LobbyInfoList( NG2C_SYSTEM_MSG_TYPE, NG2C_GAME_LOBBY_INFO_LIST )
{
	// 0 - PVE Server, 1 - PVP Server
	_byte		lobby_type;
	_byte		page_index;
	_byte		page_max;
	struct		lobby_info
	{
		_uint32		index;
		_uint32		ip;
		_uint16		port;
		_string		name;
	};
	vector< lobby_info > lobbys;
};

//////////////////////////////////////////////////////////////////////////
// 允许跳转服务器
//////////////////////////////////////////////////////////////////////////
message NG2C_AllowJumpServer( NG2C_SYSTEM_MSG_TYPE, NG2C_ALLOW_JUMP_SERVER )
{
	_uint32 	login_id;
	_uint32		lobby_id;
	_uint32		ip;
	_uint16		port;
	char        key[MAX_KEY_MAP_LENGTH];
};

//////////////////////////////////////////////////////////////////////////
// 拒绝跳转服务器
//////////////////////////////////////////////////////////////////////////
message NG2C_RefuseJumpServer( NG2C_SYSTEM_MSG_TYPE, NG2C_REFUSE_JUMP_SERVER )
{
	_uint16		server_idx;
};


//////////////////////////////////////////////////////////////////////////
// 跳转失败服务器
//////////////////////////////////////////////////////////////////////////
message NG2C_JumpServerFail( NG2C_SYSTEM_MSG_TYPE, NG2C_JUMP_SERVER_FAIL )
{
	_uint32 lobby_id;
	_byte reason;
};


//////////////////////////////////////////////////////////////////////////
// 公告消息
//////////////////////////////////////////////////////////////////////////
message NG2C_GlobalAffiche( NG2C_SYSTEM_MSG_TYPE, NG2C_GLOBAL_AFFICHE )
{
	_string		context;
};

//////////////////////////////////////////////////////////////////////////
// 强制下线
//////////////////////////////////////////////////////////////////////////
message NG2C_ForceOffline( NG2C_SYSTEM_MSG_TYPE, NG2C_FORCE_OFFLINE )
{
};

//////////////////////////////////////////////////////////////////////////
// 进入大厅失败
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterLobbyFailed( NG2C_LOBBY_MSG_TYPE, NG2C_ENTER_LOBBY_FAIL )
{
	enum
	{
		//	跳服信息不存在
		JUMPER_INFO_NO_EXIST,
				
		//	创建角色失败
		CREATE_ROLE_FAILED,
		
		// 	key验证失败
		VALIDATE_KEY_FAILED,
	};
	_byte reason;
};

//////////////////////////////////////////////////////////////////////////
// 进入大厅成功
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterLobbySuccess( NG2C_LOBBY_MSG_TYPE, NG2C_ENTER_LOBBY_SUCCESS )
{
	_uint16		lobby_id;
	_uint32		player_id;
	//_uint32        punchserver_addr;
	//_uint16		punchserver_port;
	char            key[MAX_KEY_MAP_LENGTH];
};

//////////////////////////////////////////////////////////////////////////
// 游戏大厅信息
//////////////////////////////////////////////////////////////////////////
message NG2C_GameLobbyInfo( NG2C_LOBBY_MSG_TYPE, NG2C_ROOM_INFO_LIST )
{
	_string		lobby_name;
	_byte		level;
	_byte		page_index;
	_byte		max_page;
	struct		roominfo
	{
		_uint32		room_id;
		_uint16		room_serial;
		_uint16		map_id;
		_string		room_name;
		_string		host_name;
		_byte		room_status;
		_byte		room_capacity;
		_byte		room_player_count;
		_byte		game_mode;
		_byte		team_mode;
		bool		password;
	};
	vector< roominfo > rooms;
};

// 返回大厅玩家列表
message NG2C_LobbyPlayerInfo( NG2C_LOBBY_MSG_TYPE, NG2C_GAME_PLAYER_INFO_LIST )
{
	_byte		page_index;
	_byte		max_page;
	struct		playerinfo
	{
		_uint32		tempid;
		_string		name;
	};
	vector< playerinfo > players;
};

//////////////////////////////////////////////////////////////////////////
// 创建房间结果
//////////////////////////////////////////////////////////////////////////
message NG2C_CreateRoomResult( NG2C_LOBBY_MSG_TYPE, NG2C_CREATE_ROOM_RESULT )
{
	_byte		result;
	_byte		code;
	_uint32		room_id;
};

//////////////////////////////////////////////////////////////////////////
// 进入房间成功,返回房间信息
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterRoomSuccess( NG2C_LOBBY_MSG_TYPE, NG2C_ENTER_ROOM_SUCCESS )
{
	_uint32		room_id;
	_uint32		room_host;
	_uint32		player_id;
	_uint32		inner_id;
	_uint16		room_number;
	_uint16		level;
	_byte		room_status;
	_byte		mode;
	_byte		team;
	_byte		capacity;
	_byte		team_id;
	_string		room_name;
	struct		playerinfo
	{
		_string		player_name;
		_uint32		player_id;
		_uint32		score;
		_uint32		player_status;
		_uint32		inner_id;
		_uint16		player_avatar[MAX_AVATAR_COUNT];
		//0红队，1蓝队
		_byte		team_id; 
		_byte 		player_sex;

		struct equipment_info
		{
			// 类型ID， 比如武器、装备、道具、材料
			_byte 	nTypeID;						
			// 物品类型ID
			_uint32 	nWareTypeID;  	
			// 是否使用耐久度
			bool bUseST;					
			// 耐久度			
			_uint32 nCurST;	
		};
		vector< equipment_info > equipments;
		
	};
	vector< playerinfo > players;
};

//通知client连接RelayServer
message NG2C_NotifyClientConnectRelayServer( NG2C_SYSTEM_MSG_TYPE, NG2C_NOTIFY_CLIENT_CONNECT_RELAY_SERVER )
{
	_uint32	player_id;
	_uint32	inner_id;
	_uint32	relay_addr;
	_uint16	relay_port;
	_uint32	hostid;
};

//通知client建立网络连接消息包
message NG2C_NotifyClientSetupP2PNetwork( NG2C_SYSTEM_MSG_TYPE, NG2C_NOTIFY_CLIENT_SETUP_P2P_NETWORK )
{
	struct	p2point_info
	{
		_uint32	player_id;
		_uint32	inner_id;
		_uint32	outer_addr;
		_uint32 inner_addr;
		_uint16	outer_port;
		_uint16 inner_port;
		_byte   UPnPSupport;
	};
	vector< p2point_info > p2plist;
};

//////////////////////////////////////////////////////////////////////////
// 进入房间失败
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterRoomFailed( NG2C_LOBBY_MSG_TYPE, NG2C_ENTER_ROOM_FAILED )
{
	enum
	{
		RESULT_ERROR_PASSWORD,
		RESULT_ERROR_ROOMSTART,
		RESULT_ERROR_NOPUNCH,
	};
	_byte		result;
};

//通知Client断开p2p连接
message NG2C_NotifyClientShutdownP2PConnection( NG2C_SYSTEM_MSG_TYPE, NG2C_NOTIFY_CLIENT_SHUTDOWN_P2P_CONNECTION )
{
	 _uint32		player_id;
	 _uint32		inner_id;
};

//////////////////////////////////////////////////////////////////////////
// 玩家进入房间
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerEnterRoom( NG2C_ROOM_MSG_TYPE, NG2C_PLAYER_ENTER_ROOM )
{
	_string		player_name;
	_uint32		player_id;
	_uint32		host_id;
	_uint32		player_score;
	_uint32		inner_id;

	_uint16		player_avatar[MAX_AVATAR_COUNT];
	_byte 		player_sex;
	_byte		player_status;
	_byte		team_id;	//0:红队，1：蓝队 
	_byte		player_UPnPSupport;
	struct equipment_info
	{
		// 物品类型ID
		_uint32 nWareTypeID;
		// 耐久度			
		_uint32 nCurST;
		// 类型ID， 比如武器、装备、道具、材料
		_byte 	nTypeID;
		// 是否使用耐久度
		bool	bUseST;
	};
	vector< equipment_info > equipments;
};

//////////////////////////////////////////////////////////////////////////
// 玩家离开房间
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerLeaveRoom( NG2C_ROOM_MSG_TYPE, NG2C_PLAYER_LEAVE_ROOM )
{
	_uint32		player_id;
	_uint32		inner_id;
};

//////////////////////////////////////////////////////////////////////////
// 房间设置改变
//////////////////////////////////////////////////////////////////////////
message NG2C_ChangeRoomSetting( NG2C_ROOM_MSG_TYPE, NG2C_CHANGE_ROOM_SETTING )
{
	_string		room_name;
	_byte		gmode;
	_byte		rmode;
	_uint16		serial_level_id;
	_uint16		map_id;
	_byte		capacity;
	_byte		player_count;
};

//////////////////////////////////////////////////////////////////////////
// 房主变更
//////////////////////////////////////////////////////////////////////////
message NG2C_ChangeRoomHost( NG2C_ROOM_MSG_TYPE, NG2C_CHANGE_ROOM_HOST )
{
	_uint32		player_id;
};

//////////////////////////////////////////////////////////////////////////
// 玩家换装
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerChangeEquip( NG2C_ROOM_MSG_TYPE, NG2C_PLAYER_CHANGE_EQUIP )
{
	_uint32	player_id;
	// 武器信息  
	_uint32 weapon_id;
	// AVATAR 信息
	_uint16	avatar_id[MAX_AVATAR_COUNT];

	vector< _uint32 > equipments;
};

//////////////////////////////////////////////////////////////////////////
// 踢出玩家结果
//////////////////////////////////////////////////////////////////////////
message NG2C_KickPlayerResult( NG2C_ROOM_MSG_TYPE, NG2C_KICK_PLAYER_RESULT )
{
	_uint32		player_id;
};

//返回房间内可选择地图列表

message NG2C_RoomMapList( NG2C_ROOM_MSG_TYPE, NG2C_ROOM_MAP_LIST )
{
	struct map_info
	{
		// 地图ID
		_uint32 	map_id;						
		// 地图标志 new，clear，lock
		_byte map_flag;
	};
	vector< map_info > mapvec;
};

//////////////////////////////////////////////////////////////////////////
// GM踢出玩家结果
//////////////////////////////////////////////////////////////////////////
message NG2C_KickPlayerResultByGM( NG2C_CHANNEL_MSG_TYPE, NG2C_KICK_PLAYER_RESULT_GM )
{
	_uint32		player_id;
};

//////////////////////////////////////////////////////////////////////////
// 玩家状态改变通知
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerStatusChange( NG2C_ROOM_MSG_TYPE, NG2C_PLAYER_STATUS_CHANGE )
{
	_uint32		player_id;
	_uint32		player_status;
};

// 游戏结束通知
message NG2C_GameEndResult( NG2C_NETWORK_MSG_TYPE, NG2C_GAME_END_RESULT )
{
};

// 频道聊天消息
message NG2C_Talk( NG2C_CHANNEL_MSG_TYPE, NG2C_TALK )
{
	// 谁说话
	_string		player_name;
	_string		talk_content;
};

// 系统公告消息
message NG2C_System_Affiche( NG2C_CHANNEL_MSG_TYPE, NG2C_SYSTEM_AFFICHE )
{
	_string		Affiche_content;
};

// 通知玩家被禁言
message NG2C_Notify_Forbid( NG2C_CHANNEL_MSG_TYPE, NG2C_NOTIFY_FORBID )
{
	_uint32 player_id;
};


// 通知角色创建Host
message NG2C_NotifyPlayerCreateHost( NG2C_NETWORK_MSG_TYPE, NG2C_NOTIFY_PLAYER_CREATE_HOST )
{
	_uint32	room_index;
	_uint32	punchserver_addr;
	_uint16	punchserver_port;
	_uint32	relayserver_addr;
	_uint16	relayserver_port;
	_byte	player_count;
};

//////////////////////////////////////////////////////////////////////////
// 通知客户端网络层,PunchServer的地址
//////////////////////////////////////////////////////////////////////////
message NG2C_NotifyPunchAddress( NG2C_NETWORK_MSG_TYPE, NG2C_NOTIFY_PUNCH_ADDRESS )
{
	_uint32	punch_address;
	_uint16	punch_port;
};

//////////////////////////////////////////////////////////////////////////
// 告诉客户端选择的链路
//////////////////////////////////////////////////////////////////////////
message NG2C_NotifySelectLinks( NG2C_NETWORK_MSG_TYPE, NG2C_NOTIFY_SELECT_LINK )
{
	struct link
	{
		_byte inner;
		_byte linktype;
	};
	vector< link > links;
};

// 通知角色请连接Host
message NG2C_NotifyPlayerConnectHost( NG2C_NETWORK_MSG_TYPE, NG2C_NOTIFY_PLAYER_CONNECT_HOST )
{
	enum
	{
		en_host_server,
		en_client,
	};
	_uint32		room_id;
	_uint32		host_outer_ip;
	_uint32		host_inner_ip;
	_uint16		host_outer_port;
	_uint16		host_inner_port;
	_byte		host_local;
	_byte		UPnPSupport;
};

// 连接RelayServer通知
message NG2C_NotifyPlayerConnectRelayServer( NG2C_NETWORK_MSG_TYPE, NG2C_NOTIFY_PLAYER_CONNECT_RELAYSERVER )
{
	_uint32		relayserver_addr;
	_uint16		relayserver_port;
};


//////////////////////////////////////////////////////////////////////////
// 玩家登录, 返回好友列表
//////////////////////////////////////////////////////////////////////////
message NG2C_FriendListSuccess( NG2C_FRIEND_MSG_TYPE, NG2C_FRIEND_LIST_SUCCESS )
{
	struct friend_info
	{
		_string		nickname;
		bool		flag_online;
		_uint16		level;
		_uint32		class_id;
		_uint32		face_id;
		_uint16		server_id;
		_uint32		temp_id;
	};
	vector< friend_info > friends;
};

//////////////////////////////////////////////////////////////////////////
// 玩家登录, 返回黑名单列表
//////////////////////////////////////////////////////////////////////////
message NG2C_BlackListSuccess( NG2C_FRIEND_MSG_TYPE, NG2C_BLACK_LIST_SUCCESS )
{
	struct black_info
	{
		bool		flag_online;
		_uint16		level;
		_uint16		server_id;
		_uint32		class_id;
		_uint32		face_id;
		_uint32		temp_id;
		_string		nickname;
	};
	vector< black_info > blacks;
};

//////////////////////////////////////////////////////////////////////////
// 请求好友列表失败
//////////////////////////////////////////////////////////////////////////
message NG2C_FriendListFailed( NG2C_FRIEND_MSG_TYPE, NG2C_FRIEND_LIST_FAILED )
{
	_uint32		reason;
};

//////////////////////////////////////////////////////////////////////////
// 请求黑名单列表失败
//////////////////////////////////////////////////////////////////////////
message NG2C_BlackListFailed( NG2C_FRIEND_MSG_TYPE, NG2C_BLACK_LIST_FAILED )
{
	_uint32		reason;
};

//////////////////////////////////////////////////////////////////////////
// 好友上线
//////////////////////////////////////////////////////////////////////////
message NG2C_FriendOnline( NG2C_FRIEND_MSG_TYPE, NG2C_FRIEND_ONLINE )
{
	_string		nickname;
	_uint16		server_id;
	_uint32		temp_id;
	_uint32		level;
	_uint32		class_id;
};

//////////////////////////////////////////////////////////////////////////
// 好友下线
//////////////////////////////////////////////////////////////////////////
message NG2C_FriendOffline( NG2C_FRIEND_MSG_TYPE, NG2C_FRIEND_OFFLINE )
{
	_string		friend_name;
	_uint16		server_id;
	_uint32		temp_id;
};

//////////////////////////////////////////////////////////////////////////
// 添加好友结果
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerAddFriendResult( NG2C_FRIEND_MSG_TYPE, NG2C_PLAYER_ADD_FRIEND_RESULT )
{
	_string		nickname;
	// result 1 - 成功 0 - 失败
	bool		result;
	_uint32		reason;
};

//////////////////////////////////////////////////////////////////////////
// 删除好友结果
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerDelFriendResult( NG2C_FRIEND_MSG_TYPE, NG2C_PLAYER_DEL_FRIEND_RESULT )
{
	_string		nickname;
	// result 1 - 成功 0 - 失败
	bool		result;
	_uint32		reason;
};

//////////////////////////////////////////////////////////////////////////
// 屏蔽好友结果
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerForbidFriendResult( NG2C_FRIEND_MSG_TYPE, NG2C_PLAYER_FORBID_FRIEND )
{
	_string		nickname;
	// result 1 - 成功 0 - 失败
	bool		result;
	_uint32		reason;
	// true - 屏蔽, false - 解除屏蔽
	bool		flag_forbid;
};

//////////////////////////////////////////////////////////////////////////
// 好友聊天
//////////////////////////////////////////////////////////////////////////
message NG2C_FriendTalk( NG2C_FRIEND_MSG_TYPE, NG2C_FRIEND_TALK )
{
	_uint32		friend_temp_id;
	_uint16		friend_server_id;
	// 谁发的
	_string		friend_name;
	_string		message;
};

//////////////////////////////////////////////////////////////////////////
// 角色聊天
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerTalk( NG2C_FRIEND_MSG_TYPE, NG2C_PLAYER_TALK )
{
	_uint32		sender_temp_id;
	_uint16		sender_server_id;
	// 谁发的
	_string		sender_name;
	_string		message;
};

// 聊天信息失败
message NG2C_TalkFailed( NG2C_FRIEND_MSG_TYPE, NG2C_TALK_FAILED )
{
	_string		peer_name;
	_byte		reason;
	enum
	{
		PLAYER_NOT_EXITS,
		NOT_TALK_WITH_SELF,
	};
};


//////////////////////////////////////////////////////////////////////////
// 好友请贴
//////////////////////////////////////////////////////////////////////////
message NG2C_InviteFriend( NG2C_FRIEND_MSG_TYPE, NG2C_INVITE_FRIEND )
{

	// 邀请角色tempid
	_uint32		invite_role_temp_id;
	// 邀请角色server_id
	_uint16		invite_role_server_id;
	// 邀请角色名字	
	_string		invite_role_name;
	// 房间ID
	_uint32		room_id;
};

//////////////////////////////////////////////////////////////////////////
// 可以跳转服务器
//////////////////////////////////////////////////////////////////////////
message NG2C_AllowInviteJumpServer( NG2C_FRIEND_MSG_TYPE, NG2C_ALLOW_INVITE_JUMP_SERVER )
{
	// 目标角色temp_id
	_uint32 		invite_role_tmep_id;
	// 跳转目标服务器
	_uint16		invite_role_server_id;
};




//////////////////////////////////////////////////////////////////////////
// 允许跟随
//////////////////////////////////////////////////////////////////////////
message NG2C_AllowFollowFriend( NG2C_FRIEND_MSG_TYPE, NG2C_ALLOW_FOLLOW_FRIEND )
{
	//	被跟随角色的temp_id
	_uint32		be_followed_role_temp_id;
	//	被跟随角色的server_id
	_uint16		be_followed_role_server_id;
};


//////////////////////////////////////////////////////////////////////////
// 拒绝跟随  
//////////////////////////////////////////////////////////////////////////
message NG2C_RefuseFollowFriend( NG2C_FRIEND_MSG_TYPE, NG2C_REFUSE_FOLLOW_FRIEND )
{
	enum
	{
		//	跟随好友大厅等级限制
		LOBBY_LEVEL_LIMIT,
		//	跟随好友大厅已满负载
		LOBBY_CAPABILITY_LIMIT,
	};
	_byte reason;
};


//////////////////////////////////////////////////////////////////////////
// 玩家信息
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerInfoResult( NG2C_FRIEND_MSG_TYPE, NG2C_PLAYER_INFO )
{

	_uint16		server_id;
	_string		nickname;
	_byte 		sex;
	_string		place_name;
	_byte		place;
	_byte		state;
	_uint16		player_avatar[MAX_AVATAR_COUNT];

	struct equipment_info
	{
		// 类型ID， 比如武器、装备、道具、材料
		_byte 	nTypeID;						
		// 物品类型ID
		_uint32 	nWareTypeID;  	
		// 是否使用耐久度
		bool bUseST;					
		// 耐久度			
		_uint32 nCurST;	
	};
	vector< equipment_info > equipments;

	enum
	{
		PLACE_LOBBY,
		PLACE_ROOM,
		PLACE_SPACE,
		PLACE_SHOP,
	};

	enum
	{
		STATE_FREE,
		STATE_BUSY,
		STATE_READY,
		STATE_PLAING,
	};
};

//////////////////////////////////////////////////////////////////////////
// 请求玩家信息失败
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerInfoFailed( NG2C_FRIEND_MSG_TYPE, NG2C_PLAYER_INFO_FAILED )
{
	_uint32		reason;
	enum
	{
		PLAYER_NOT_EXITS,
	};
};


 
//////////////////////////////////////////////////////////////////////////
// 角色翻牌结果  
//////////////////////////////////////////////////////////////////////////
message NG2C_PickupGameAwardResult( NG2C_ROOM_MSG_TYPE, NG2C_PICKUP_GAME_AWARD_RESULT )
{
	// 角色房间内ID
	_byte   inner_id; 
	// 付费金额 
	_uint16 pay_louise;
	// 付费卡购买的物品类型ID, 看枚举（enum AwardType）			
	_uint16 pay_item_type;
	// 付费卡购买的物品ID,如果上面是louise类型，则这个标识louise金额,如果上面的是空奖励，则下面无意义			
	_uint32   pay_item_ID;												
};

//////////////////////////////////////////////////////////////////////////
// 通知房间内别的玩家这个玩家改变队伍了
//////////////////////////////////////////////////////////////////////////
message NG2C_NotifyChangeTeam( NG2C_ROOM_MSG_TYPE, NG2C_NOTIFY_CHANGE_TEAM )
{
	_uint32 player_id;
	//0:红队，1:兰队
	_byte dest_team_id; 
};

//////////////////////////////////////////////////////////////////////////
//	gameserver -> client 下传异常导致回到等待房间
//////////////////////////////////////////////////////////////////////////
message NG2C_ExceptionBackWaitRoom( NG2C_ROOM_MSG_TYPE, NG2C_EXCEPTION_BACK_WAITROOM )
{
	_uint32		player_id;
	_uint32		player_status;
	_uint32 		exception;
};



//////////////////////////////////////////////////////////////////////////
//	角色进入个人空间成功,
//	考虑到角色的基本属性数据可能与服务器不一致，所以要以服务器的
//  为主，完全听从于服务器的数据
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterPersonspaceSuccess ( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_ENTER_PERSON_SPACE_SUCCESS	 )
{

	// 累计游戏金币
	_uint32 total_game_coin;				
	//	点卷
	_uint32 game_money							
	// 	角色等级
	_uint16 grade_id;						
	// 	角色经验
	_uint32 total_experience; 			
	//	下级经验
	_uint32 next_grade_experience; 
	// 	速度
	_byte speed;									
	// 	防御
	_byte defence; 							
	// 	力量
	_byte attack; 								
	// 	耐力
	_byte stamina; 							
	//	运气
	_byte luck; 									
	// 	角色成就 
	_uint32 fruition;							
	// 	角色声望 
	_uint32 prestige;							
	// 	累计个人模式赢的次数
	_uint16 single_win_count;		
	// 	累计个人模式输的次数
	_uint16 single_lose_count;		
	// 	累计组队模式赢的次数
	_uint16 team_win_count;			
	// 	累计组队模式输的次数
	_uint16 team_lose_count;			
	// 	累计逃跑次数
	_uint16 run_away_count;			
};

//////////////////////////////////////////////////////////////////////////
//	角色进入个人空间失败
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterPersonspceFailed( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_ENTER_PERSON_SPACE_FAILED )
{
	enum
	{
		PLAYER_ERROR_STATE,
		PLAYER_ERROR_DATA,
	};
	_byte reason;
};


//////////////////////////////////////////////////////////////////////////
//改变物品位置失败
//////////////////////////////////////////////////////////////////////////
message NG2C_ChangeWarePosFail( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_CHANGE_WARE_POS_FAIL )
{
	// 当前物品大类型ID,比如武器、装备、道具等等
	_byte type_id;
	// 请求更换位置的物品的位置
	_uint32 ware_pos_idx;
	// 请求更换位置的物品的子类型
	_uint32 ware_type_id;
	
	enum
	{
		//改变成功
		CHANGE_SUCCESS,
		//源位置没有物品
		SRC_POS_NO_WARE,
		//找不到物品表	 
		NO_FIND_WARE_TABLE,	 
	};
	// 返回错误码
	_byte reason;						
};

//////////////////////////////////////////////////////////////////////////
//请求装备物品到角色失败
//////////////////////////////////////////////////////////////////////////
message NG2C_EquipWareFailed( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_EQUIP_WARE_FAIL )
{
	enum 
	{
		//装备成功
		EQUIP_SUCCESS,
		//背包没有空间了
		NO_EMPTY_POS,		
		//这个物品无法装备
		NOT_CAN_EQUIP,			
		//等级不够
		GRADE_LIMITE,			
		//零耐久度
		ZERO_HARDINESS,			
		//不同装备类型的装备
		DIFF_EQUIPMENT_TYPE,
		//性别不允许
		SEX_NO_ALLOW,	
	};
	_byte reason;
};



////////////////////////////////////////////////////////////////////////////////
//请求卸载物品到背包 失败
///////////////////////////////////////////////////////////////////////////////
message NG2C_UnEquipWareFailed( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_UNEQUIP_WARE_FAILED )
{
	// 当前物品大类型ID,比如武器、装备、道具等等
	_byte type_id;
	// 物品的子类型, 比如武器分为火炮、弹弓等等子类型
	_uint32 ware_type_id; 
	// 失败原因 
	_byte reaon;
	enum 
	{
		//装备成功
		UNEQUIP_SUCCESS,
		//背包没有空间了
		NO_EMPTY_POS,	
	};
};



//////////////////////////////////////////////////////////////////////////
//修理成功
//////////////////////////////////////////////////////////////////////////
message NG2C_RepairWareSuccess( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_REPAIR_WARE_SUCCESS )
{
	//	要修理的物品类型
	_byte type_id;				
	// 物品的子类型
	_uint32 ware_type_id;
	// 	物品位置
	_uint16 pos_idx;								
	//	当前耐久度
	_uint32 cur_st;					
	// 所需的魔法锤的ID
	_uint16 magic_hammer_pos_idx;  
};

//////////////////////////////////////////////////////////////////////////
//修理失败
//////////////////////////////////////////////////////////////////////////
message NG2C_RepairWareFail( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_REPAIR_WARE_FAIL )
{
	enum
	{
		PLAYER_ERROR_STATE,	
		WARE_TYPE_NO_EXIST,	
		WARE_NO_EXIST,			 
		TIME_LIMIT_ARRIVEED,			 
		NO_EXIST_MAGIC_ID,			 
		MAGIC_NO_LACK,					 
	};
	_byte reason;
};

//////////////////////////////////////////////////////////////////////////
//回收失败
//////////////////////////////////////////////////////////////////////////
message NG2C_WareRecycleFail( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_WARE_RECYCLE_FAIL )
{
	// 物品的类型
	_byte type_id;		
	// 物品的位置索引 
	_uint16 pos_idx;		
	enum
	{
		//回收成功
		RECYCLE_SUCCESS,
		//没有找到物品
		NO_FIND_WARE,
		//物品数错误				 
		WARE_NUM_ERROR,			 
	};
	_byte reason;
};



//////////////////////////////////////////////////////////////////////////
//用户在房间时，离开个人空间时广播玩家换装信息
//////////////////////////////////////////////////////////////////////////

message NG2C_NotifyChangeEquipment( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_NOTIFY_CHANGE_EQUIPMENT )
{
	
	//玩家在gameserver上的唯一id
	_uint32 player_id;
	//玩家房间内id
	_byte inner_id;

	struct equipment_info
	{
		// 类型ID， 比如武器、装备、道具、材料
		_byte 	nTypeID;						
		// 物品类型ID
		_uint32 	nWareTypeID;  	
		// 是否使用耐久度
		bool bUseST;					
		// 耐久度			
		_uint32 nCurST;	
	};
	vector< equipment_info > equipments;
}


//////////////////////////////////////////////////////////////////////////
//物品整理成功
//////////////////////////////////////////////////////////////////////////
message NG2C_WareSortSuccess( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_WARE_SORT_SUCCESS )
{
	// 物品的类型
	_byte type_id;
	//整理后物品信息
	struct ware_info
	{		
		// 所在页中的位置信息
		_uint16 nPosIdx;					
		// 物品类型ID
		_uint32 nWareTypeID;
		// 物品使用模式
		// 计算过的数据 比如剩余的时间/剩余的个数/目前的耐久度
		// 物品的具体类型ID 	
		// 是否使用天权 
		bool bUseTimeDroit;					
		// (以f分为单位)
		_uint32 nCurTimeDroit;	
		// 是否使用耐久度
		bool bUseST;					
		// 耐久度			
		_uint32 nCurST;	
		// 是否使用堆列 
		bool bUsePileup;							
		// 当前队列数量
		_uint32 nCurPileupNumber;		
	};
	vector< ware_info > wares;
};

//////////////////////////////////////////////////////////////////////////
//物品整理失败
//////////////////////////////////////////////////////////////////////////
message NG2C_WareSortFail( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_WARE_SORT_FAIL )
{
	// 物品的类型
	_byte type_id;
	//整理结果枚举定义		
	enum
	{
		//整理成功
		SORT_SUCCESS,
		//没有找到物品类型 
		NO_FIND_WARE_TYPE,	
		//整理频繁				 
		SORT_SO_FAST,			 
	};
	//整理结果
	_byte reason;
};

///////////////////////////////////////////////////////////////////通用消息///////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
//更新用户的基本信息，如果以后有需求可以在消息增加更多的基本信息
//////////////////////////////////////////////////////////////////////////
message NG2C_UpdateRoleBaseInfo( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_UPDATE_ROLE_BASE_INFO )
{
	
	//玩家在gameserver上的唯一id
	_uint32 player_id;
	// 等级
	_uint32 nCurGrade;
	// 当前等级的经验值
	_uint32 nCurExp;
	// 当前等级的最大经验值
	_uint32 nCurMaxExp;
	// 总游戏点卷
	_int32 nTotalGameMoney;
	// 总游戏louise币									
	_int32 nTotalGameLouise;									
}

//////////////////////////////////////////////////////////////////////////////
//更新用户背包中的物品
//////////////////////////////////////////////////////////////////////////////
message NG2C_UpdateWareInfoInBag( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_UPDATE_WARE_IN_BAG )
{
	//物品的类型
	_byte type_id;
	//更新的物品信息
	struct ware_info
	{		
		// 物品类型ID
		_uint32 nWareTypeID;
		// (以f分为单位)
		_uint32 nCurTimeDroit;
		// 耐久度			
		_uint32 nCurST;
		// 当前堆叠数量
		_uint32 nCurPileupNumber; //如果为0,则表示没有物品放在此格	
		// 所在页中的位置信息
		_uint16 nPosIdx;
		// 物品使用模式
		// 计算过的数据 比如剩余的时间/剩余的个数/目前的耐久度
		// 物品的具体类型ID
		// 是否使用天权 
		bool bUseTimeDroit;
		// 是否使用耐久度
		bool bUseST;
		// 是否使用堆列 
		bool bUsePileup;
	};
	vector< ware_info > wares;
};

//////////////////////////////////////////////////////////////////////////////
//更新用户身上的装备
//////////////////////////////////////////////////////////////////////////////
message NG2C_UpdateEquipmentInBady( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_UPDATE_EQUIPMENT_IN_BODY )
{
	//更新的物品数量,此数量是固定的，为玩家装备插槽数
	struct equip_info
	{		
		// 物品类型ID
		_uint32 	nWareTypeID;  
		// 当前堆叠数量,如果为0,则表示没有此插槽没有物品
		_uint32 nCurPileupNumber;	 	
		// (以f分为单位)
		_uint32 nCurTimeDroit;	
		// 耐久度			
		_uint32 nCurST;	
		// 插槽位置
		_uint16 slotPos;
		// 是否使用堆列 
		bool bUsePileup;							
		// 是否使用耐久度
		bool bUseST;					
		// 物品使用模式
		// 计算过的数据 比如剩余的时间/剩余的个数/目前的耐久度
		// 物品的具体类型ID 	
		// 是否使用天权 
		bool bUseTimeDroit;					
	};
	vector< equip_info > wares;
};


//////////////////////////////////////////////////////////////////////////
//添加新的物品到背包
//////////////////////////////////////////////////////////////////////////
message NG2C_AddNewWareToPack( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_ADD_NEW_WARE_TO_PACK )
{
	struct ware_info
	{
		// 所在页中的位置信息
		_uint16 nPosIdx;			
		// 物品类型ID
		_uint32 nWareTypeID;  
		// (以f分为单位)
		_uint32 nCurTimeDroit;	
		// 耐久度			
		_uint32 nCurST;	
		// 当前队列数量
		_uint32 nCurPileupNumber;	
		// 物品使用模式
		// 计算过的数据 比如剩余的时间/剩余的个数/目前的耐久度
		// 物品的具体类型ID 	
		// 是否使用天权 
		bool	bUseTimeDroit;					
		// 是否使用耐久度
		bool	bUseST;					
		// 是否使用堆列 
		bool	bUsePileup;							
		// 类型ID， 比如武器、装备、道具、材料
		_byte 	nTypeID;			
		// 0: 背包中; 1: 正在使用中；
		_byte	bUsing;				
	};
	vector< ware_info > new_wares;
};


//////////////////////////////////////////////////////////////////////////////
//删除背包中的物品
//////////////////////////////////////////////////////////////////////////////
message NG2C_DeleteWareInBag( NG2C_PERSON_SPACE_MSG_TYPE, NG2C_DELETE_WARE_IN_BAG )
{

	//物品的类型
	_byte type_id;
	vector< _uint16 > deletePos;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
//访问商城失败消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_EntryShopFail( NG2C_SHOP_MSG_TYPE, NG2C_ENTRY_SHOP_FAIL )
{
	//失败结果枚举定义		 
	enum
	{
		//角色状态原因
		PLAYER_STATE_ERROR,
	};
	//失败结果
	_byte reason;
};

//////////////////////////////////////////////////////////////////////////
// 回复商店tab结构
//////////////////////////////////////////////////////////////////////////
message NG2C_ShopConfigId( NG2C_SHOP_MSG_TYPE, NG2C_SHOP_CONFIG_ID )
{
	
	//商店的配置id
	_uint16 shop_config_id; 
		// 游戏内货币：路易斯卡 
	_uint32		total_game_inner_money_score;
	// 游戏外货币：点券 
	_uint32		total_game_outer_money_score;
};

////////////////////////////////////////////////////////////////////////////////
//下发商品页数据消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestSpecPageFail( NG2C_SHOP_MSG_TYPE, NG2C_REQUEST_SPEC_PAGE_FAIL )
{
	enum 
	{
		//	成功返回 
		RETURN_SUCCESS,
		
		// 	角色状态原因
		PLAYER_STATE_ERROR,
		
		// 	解析消息包错误
		PARSE_MSG_ERROR,
		
		// 	商店类型错误
		SHOP_TYPE_ERROR,
		
		//	商店子类型错误
		SHOP_SUB_TYPE_ERROR,
		
		// 	支付货币类型错误
		PAY_MONEY_TYPE_ERROR,
		
		// 	适用性别错误
		USED_SEX_TYPE_ERROR,
		
		//	请求的页码不存在
		REQUEST_PAGE_ID_NO_EXIST,
		
		// 	发送请求数据失败
		SEND_REQUEST_PAGE_DATA_FAIL,
		
		// 	没有商品数据 
		NO_EXIST_MERCHANDISE_DATA,
	};
	_byte reason;
};

////////////////////////////////////////////////////////////////////////////////
//下发商品页数据消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_PageMerchandiseData( NG2C_SHOP_MSG_TYPE, NG2C_PAGE_MERCHANDISE_DATA )
{
	// 商品页总数
	_uint16 page_total_count;
	
	// 当前页码
	_uint16 page_id;
	
	// 当前商店类型
	_byte shop_type;
	
	// 当前商店类型信息 
	_uint32 sub_shop_type_info;
	
	// 商品信息结果
	struct merchandise_info
	{
		//	商品ID
		_uint32 merchandise_id;		
		// 	物品ID,与ware总表的wareID对应的
		_uint32 ware_id;				
		//	商品的图标1
		_uint32 icon_id1;			
		//	商品的图标2	
		_uint32 icon_id2;
		//	角色的最低等级
		_uint16 min_player_level;	
		//	物品稀有度
		_uint16 ware_rare_level;	
		// 	折扣率 
		float discount;
		//	商品名字
		_string strName;									
		//	物品类别，大类别，比如
		_byte ware_class;				
		//	货币类型
		_byte pay_money_type;		
		//	角色的性别要求 
		_byte need_gender;			

		//	价格结构
		struct price_info
		{
			//	使用期限, 非天权物品为0;永久天权为 -1;以秒为单位计算天权 
			_uint32 time;	
			//	累计数量	
			_uint32 count;
			//	购买价格					
			_uint32 price;
		};
		vector< price_info > prices;		
	};
	vector< merchandise_info > merchandises;
};

////////////////////////////////////////////////////////////////////////////////
//下发合成页数据消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_PageComposeData( NG2C_SHOP_MSG_TYPE, NG2C_PAGE_COMPOSE_DATA )
{
	// 合成页总数
	_uint16 page_total_count;
	
	// 当前页码
	_uint16 page_id;
	
	// 当前商店类型
	_byte shop_type;
	
	// 当前商店类型信息 
	_uint32 sub_shop_type_info;
	
	// 具体合成配方数据 
	struct compose_info
	{
		//	商品ID
		_uint32 comp_merch_id;		
		// 	物品ID,与ware总表的wareID对应的
		_uint32 ware_id;				
		//	购买价格					
		_uint32 price;
		//	商品的图标1
		_uint32 icon_id1;			
		//	商品的图标2	
		_uint32 icon_id2;
		//	角色的最低等级
		_uint16 min_player_level;	
		//	物品稀有度
		_uint16 ware_rare_level;	
		// 	折扣率 
		float discount;			
		
		//	角色的性别要求 
		_byte need_gender;			
		//	货币类型
		_byte pay_money_type;		
		//	商品名字
		_string strName;									
		
		// 可买材料信息
		struct enable_buy_material_info
		{
			// 物品id
			_uint32 ware_id;
			// 此物品对应的商品id
			_uint32 merchandise_id;
			// 对应实际材料的索引
			_byte idx;
		};
		vector< enable_buy_material_info > enable_buy_materials;
	};
	vector< compose_info > composes;
};

 

////////////////////////////////////////////////////////////////////////////////
//购买商品成功消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestBuyMerchandiseSuccess( NG2C_SHOP_MSG_TYPE, NG2C_BUY_MERCHANDISE_SUCCESS )
{
	// 游戏内货币：路易斯卡
	_uint32 remain_game_inner_money_score;
	// 游戏外货币：点券
	_uint32 remain_game_outer_money_score;
};

	


////////////////////////////////////////////////////////////////////////////////
//购买商品失败消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestBuyMerchandiseFail( NG2C_SHOP_MSG_TYPE, NG2C_BUY_MERCHANDISE_FAIL )
{
	enum 
	{
		// 正常
		RETURN_SUCCESS,
		
		//	状态原因
		PLAYER_STATE_ERROR,
		
		// 	解析消息包错误
		PARSE_MSG_ERROR,
		
		//	商店类型不合法
		SHOP_TYPE_ERROR,
		
		//	商店子类型不合法
		SHOP_SUB_TYPE_ERROR,
		
		// 	购买的商品不合法 
		MERCHANDISE_IS_UNLAWFUL,
		
		// 支付货币类型错误
		PAY_MONEY_TYPE_ERROR,
		
		// 指定的交易价格不存在 
		TRADE_PRICE_NO_EXIST,
		
		// 性别类型错误
		USED_SEX_TYPE_ERROR,
		
		//	货币不足
		MONEY_NO_FULL,
		
		// 	背包已满
		PACK_IS_FULL, 
		
		// 	等级限制
		PLAYER_LEVEL_LIMIT,
		
		// 	性别限制
		PLAYER_SEX_LIMIT,
	};
	
	_byte reason;
};

////////////////////////////////////////////////////////////////////////////////
//合成成功消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestComposeWareSuccess( NG2C_SHOP_MSG_TYPE, NG2C_COMPOSE_WARE_SUCCESS )
{
	// 游戏内货币：路易斯卡
	_uint32 remain_game_inner_money_score;
	// 游戏外货币：点券
	_uint32 remain_game_outer_money_score;
};

////////////////////////////////////////////////////////////////////////////////
//合成失败消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestComposeWareFail( NG2C_SHOP_MSG_TYPE, NG2C_COMPOSE_WARE_FAIL )
{
	enum 
	{
		// 正常
		RETURN_SUCCESS,
		
		//	状态原因
		PLAYER_STATE_ERROR,
		
		// 	解析消息包错误
		PARSE_MSG_ERROR,
		
		//	商店类型不合法
		SHOP_TYPE_ERROR,
		
		//	商店子类型不合法
		SHOP_SUB_TYPE_ERROR,
		
		// 	购买的商品不合法 
		MERCHANDISE_IS_UNLAWFUL,
		
		// 支付货币类型错误
		PAY_MONEY_TYPE_ERROR,
		
		// 指定的交易价格不存在 
		TRADE_PRICE_NO_EXIST,
		
		// 性别类型错误
		USED_SEX_TYPE_ERROR,
		
		//	货币不足
		MONEY_NO_FULL,
		
		// 	背包已满
		PACK_IS_FULL, 
		
		// 	等级限制
		PLAYER_LEVEL_LIMIT,
		
		// 	性别限制
		PLAYER_SEX_LIMIT,
		
		//	材料不足
		MATERIAL_NO_FULL, 
		
		//	指定的材料不存在
		SPECIFY_MATERIAL_NO_EXIST,
		
		//	关键材料不合格(材料的原因分开是为了查找错误原因)
		KEY_MATERIAL_DISQUALIFICATION,
		
		//  普通材料不合格
		COM_MATERIAL_DISQUALIFICATION,
	};
	
	_byte reason;
};


////////////////////////////////////////////////////////////////////////////////
//赠送商品成功
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestDonateMerchandiseSuccess( NG2C_SHOP_MSG_TYPE, NG2C_DONATE_MERCHANDISE_SUCCESS )
{
	
};

////////////////////////////////////////////////////////////////////////////////
//赠送商品失败
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestDonateMerchandiseFail( NG2C_SHOP_MSG_TYPE, NG2C_DONATE_MERCHANDISE_FAIL )
{
	enum 
	{
		//	执行成功
		RETURN_SUCCESS,
		
		//	状态原因
		PLAYER_STATE_ERROR,
		
		// 	解析消息包错误
		PARSE_MSG_ERROR,
		
		// 	购买的商品不合法 
		MERCHANDISE_IS_UNLAWFUL,
		
		//	货币不足
		MONEY_NO_FULL,
		
		//	被赠送角色不存在
		BE_DONATED_ROLE_NO_EXIST,
		
		//	被赠送角色背包已满 (赠送不应该考虑被赠送方背包是否已满)
		BE_DONATED_PACK_IS_FULL, 
		
		// 	等级限制
		PLAYER_LEVEL_LIMIT,
		
		// 	性别限制
		PLAYER_SEX_LIMIT,
	};
	
	_byte reason;
};


////////////////////////////////////////////////////////////////////////////////
//下发指定商品数据消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_SpecMerchandiseData( NG2C_SHOP_MSG_TYPE, NG2C_SPEC_MERCHANDISE_DATA )
{
	//	商品ID
	_uint32 merchandise_id;		
	// 	物品ID,与ware总表的wareID对应的
	_uint32 ware_id;				
	//	商品的图标1
	_uint32 icon_id1;			
	//	商品的图标2	
	_uint32 icon_id2;
	//	角色的最低等级
	_uint16 min_player_level;	
	//	物品稀有度
	_uint16 ware_rare_level;	
	// 	折扣率 
	float discount;			
	//	商品名字
	_string strName;									
	//	货币类型
	_byte pay_money_type;
	// 当前商店类型
	_byte shop_type;
	//	物品类别，大类别，比如
	_byte ware_class;
	//	角色的性别要求 
	_byte need_gender;

	//	价格结构
	struct price_info
	{
		//	使用期限, 非天权物品为0;永久天权为 -1;以秒为单位计算天权 
		_uint32 time;	
		//	累计数量	
		_uint32 count;
		//	购买价格					
		_uint32 price;
	};
	vector< price_info > prices;
};

////////////////////////////////////////////////////////////////////////////////
//请求指定商品数据消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestSpecMerchandiseFail( NG2C_SHOP_MSG_TYPE, NG2C_REQUEST_SPEC_MERCHANDISE_FAIL )
{
	// 当前商店类型
	_byte shop_type;
	//	商品ID
	_uint32 merchandise_id;		
	
	enum 
	{
		//	执行成功
		RETURN_SUCCESS,
		
		//	状态原因
		PLAYER_STATE_ERROR,
		
		// 	解析消息包错误
		PARSE_MSG_ERROR,
		
		//	商店类型不合法
		SHOP_TYPE_ERROR,
		
		// 	购买的商品不合法 
		MERCHANDISE_IS_UNLAWFUL,
		
		// 	等级限制
		PLAYER_LEVEL_LIMIT,
		
		// 	性别限制
		PLAYER_SEX_LIMIT,
	};
	_byte reaon;
};

////////////////////////////////////////////////////////////////////////////////
//批量购买商品失败消息
///////////////////////////////////////////////////////////////////////////////
message NG2C_RequestBatchBuyMerchandiseFail( NG2C_SHOP_MSG_TYPE, NG2C_REQUEST_BATCH_BUY_MERCHANDISE_FAIL )
{
	enum 
	{
		//	正常
		RETURN_SUCCESS,
		
		//	状态原因
		PLAYER_STATE_ERROR,
		
		// 	解析消息包错误
		PARSE_MSG_ERROR,
		
		//	购买的商品类型不合法
		BUY_WARE_TYPE_IS_UNLAWFUL,
		
		// 	购买的商品不合法 
		MERCHANDISE_IS_UNLAWFUL,
		
		// 支付货币类型错误
		PAY_MONEY_TYPE_ERROR,
		
		// 指定的交易价格不存在 
		TRADE_PRICE_NO_EXIST,
		
		// 性别类型错误
		USED_SEX_TYPE_ERROR,
		
		//	货币不足
		MONEY_NO_FULL,
		
		// 	背包已满
		PACK_IS_FULL, 
		
		// 	等级限制
		PLAYER_LEVEL_LIMIT,
		
		// 	性别限制
		PLAYER_SEX_LIMIT,
	};
	// 错误码 
	_byte reason;
};



////////////////////////////////////////////////////////////////////////////////
// 角色进入地图 
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapPlayersEnterMap	 ( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYERS_ENTER_MAP )
{
	// 地图ID 
	_uint16 map_id;

	// 角色进入到大厅的信息
	struct player_enter_info
	{
		// 角色temp_id
		_uint32 temp_id;
		// 进入的位置
		float x;
		float z;
		// 进入的速度
		_byte vel;
	};
	vector< player_enter_info > enters;	
};

////////////////////////////////////////////////////////////////////////////////
// 角色离开地图 
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapPlayersLeaveMap( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYERS_LEAVE_MAP )
{
	// 地图ID 
	_uint16 map_id;
	// 角色离开大厅结构
	vector< _uint32 > leaves;
};

////////////////////////////////////////////////////////////////////////////////
// 角色移动 
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapPlayerMove( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYER_MOVE )
{
	//	角色移动结构
	struct move_info
	{
		// 角色 tempid
		_uint32	temp_id;
		// 前1~3位bit表示方向，后4~6位BIT表示速率，7~8位BIT保留
		_byte  vel;
	};
	vector< move_info > moves;
};

////////////////////////////////////////////////////////////////////////////////
// 角色移动位置同步 
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapPlayerMoveSynch( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYER_MOVE_SYNCH )
{
	//	角色移动结构
	struct move_info
	{
		// 角色tempid
		_uint32	temp_id;
		float x;
		float z;
		// 前1~3位bit表示方向，后4~6位BIT表示速率，7~8位BIT保留
		_byte  vel;
	};
	vector< move_info > moves;
};

///////////////////////////////////////////////////////////////////////////////
// Npc列表
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapNpcList( NG2C_MAP_MSG_TYPE, NG2C_MAP_NPC_LIST )
{
	// 所在的地图ID
	_uint16 owner_map_id;

	// NPC具体信息
	struct npc_info
	{
		// NPC对象 ID 
		_uint16 npc_id;
		// NPC对象资源配置 ID 
		_uint16 npc_config_id;
		// 进入的位置
		float x;
		float y;
		float z;
		_byte dir;
	};
	vector< npc_info > npcs;
};

////////////////////////////////////////////////////////////////////////////////
// 角色移动失败 
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapPlayerMoveFail( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYER_MOVE_FAIL )
{
	_byte reason;
};


////////////////////////////////////////////////////////////////////////////////
// 本角色出生
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapLocalPlayerBirth( NG2C_MAP_MSG_TYPE, NG2C_MAP_LOCAL_PLAYER_BIRTH )
{
	// 本地角色ID
	_uint32 temp_id;
	// 地图 ID 
	_uint16 map_id;
	// LOBBYID
	_uint16 lobby_id;
	// 此lobby配置的相对路径
	_string lobby_config_path;
};

// 请求角色数据 结果 
message NG2C_MapPlayerDataInfo( NG2C_MAP_MSG_TYPE, NG2C_MAP_UPDATE_PLAYER_DATA_INFO )
{
	// 角色数据
	struct player_data
	{
		// 角色temp_id
		_uint32 temp_id;
		// 角色的武器数据
		_uint32 weapon_id;
		// 角色的AVATAR数据
		_uint16 player_avatar[MAX_AVATAR_COUNT];
		// 角色名字
		_string name;
		// 角色性别
		_byte sex;

		vector< _uint32 > equipments;
	};
	vector< player_data > players;
};

// 角色换装广播
message NG2C_MapPlayerChangeAvatar( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYER_CHANGE_AVATAR )
{
	// 角色temp_id
	_uint32 temp_id;
	// 武器数据
	_uint32 weapon_id;
	// 角色的AVATAR数据
	_uint16 player_avatar[MAX_AVATAR_COUNT];

	vector< _uint32 > equipments;
};

////////////////////////////////////////////////////////////////////////////////
// 广播聊天信息
///////////////////////////////////////////////////////////////////////////////
message NG2C_MapPlayerChat( NG2C_MAP_MSG_TYPE, NG2C_MAP_PLAYER_CHAT )
{
	_uint32 sender_temp_id;
	_string chatTxt;
};

//////////////////////////////////////////////////////////////////////////
// 回复npc菜单有几项，也就是npc都有什么功能
//////////////////////////////////////////////////////////////////////////
message NG2C_NpcFunctionInfo( NG2C_NPC_MSG_TYPE, NG2C_NPC_MENU_INFO )
{
	_uint32 npc_id;
	_string	dialog_title;
	//描述的字符串ID,如果为零则用字符串
	_uint32 des_string_id; 
	_string dialog_des;
	//功能枚举看pubic\gamecommondata.h\eNpcFunctionInLobby

	vector< _uint32 > functions;
};

//////////////////////////////////////////////////////////////////////////
// 回复npc说的话
//////////////////////////////////////////////////////////////////////////
message NG2C_NpcTalkContent( NG2C_NPC_MSG_TYPE, NG2C_NPC_TALK_CONTENT )
{
	_string  talk_content;
	//谈话内容的字符串ID,如果为0则用字符串
	_uint32	talkID;
	struct option_info
	{
		//选项ID
		_uint16  option_id;
		//选项文本
		_string	option_text;
	};
	vector< option_info > options;
};



//////////////////////////////////////////////////////////////////////////
// 下发npc的任务列表
//////////////////////////////////////////////////////////////////////////
message NG2C_TaskList( NG2C_NPC_MSG_TYPE, NG2C_TASK_LIST )
{
	struct TaskInfo
	{
		_uint32		task_id;
		//参照questlua中的quest_type_enum
		_uint32		task_type; 
		//如果为零则用上面的task_des
		_uint32		task_des_id;
		_uint32		reward_exp;
		_uint32		reward_louise;
		_string		task_name;
		_string		task_des;
		bufstream	task_objective;
		struct reward_ware
		{
			_uint32 ware_id;
			_uint32 ware_num;
		};
		vector< reward_ware > rewardWares;
	};
	vector< TaskInfo > tasks;
};

//////////////////////////////////////////////////////////////////////////
// 下发玩家的任务列表
//////////////////////////////////////////////////////////////////////////
message NG2C_PlayerTaskList( NG2C_NPC_MSG_TYPE, NG2C_PLAYER_TASK_LIST )
{
	struct TaskInfo
	{
		_uint32 task_id;
		//参照questlua中的quest_type_enum
		_uint32 task_type; 
		_uint32 reward_exp;
		_uint32 reward_louise;
		_uint32	task_des_id; 		//如果为零则用上面的task_des
		_string task_name;
		_string task_des;
		//任务目标
		bufstream task_objective;
		//完成任务情况,如果task_type为完成的任务，则无效
		bufstream has_finished_task_info;
		struct reward_ware
		{
			_uint32 ware_id;
			_uint32 ware_num;
		};
		vector< reward_ware > rewardWares;
	};
	vector< TaskInfo > tasks;
};

//////////////////////////////////////////////////////////////////////////
//接受任务结果
//////////////////////////////////////////////////////////////////////////
message NG2C_AcceptTaskResult( NG2C_NPC_MSG_TYPE, NG2C_ACCEPT_TASK_RESULT )
{
	enum
	{
		//接受成功 
		ACCEPT_SUCCESS,	
		//已经接收了这个任务 
		HAVE_THE_TASK,
		//等级不够 
		LEVEL_LIMITE,
		//没有完成前置任务
		NO_FINISHED_PRETASK,
		//任务已经满了 
		TASK_FULL,	
	};
	//任务ID
	_uint32	task_id; 
	//接受的结果
	_byte result; 
};

//////////////////////////////////////////////////////////////////////////
//交付任务结果
//////////////////////////////////////////////////////////////////////////
message NG2C_FinishTaskResult( NG2C_NPC_MSG_TYPE, NG2C_FINISH_TASK_RESULT )
{
	enum
	{
		//交付任务成功
		FINISH_SUCCESS,
		//任务没有完成
		NO_FINISH_TASK,
		//奖励时背包满了
		TASK_REWARD_BAG_FULL,
	};
	
	//任务ID
	_uint32	task_id; 
	//交付任务的结果
	_byte result; 
};

//////////////////////////////////////////////////////////////////////////
//放弃任务结果
//////////////////////////////////////////////////////////////////////////
message NG2C_GiveUpTaskResult( NG2C_NPC_MSG_TYPE, NG2C_GIVE_UP_TASK_RESULT )
{
	enum
	{
		//放弃任务成功
		GIVE_UP_SUCCESS,
		//任务不能放弃
		NO_GIVE_UP_TASK,
	};
	
	//任务ID
	_uint32	task_id; 
	//交付任务的结果
	_byte result; 
};

//////////////////////////////////////////////////////////////////////////
// 回复进入营地结果
//////////////////////////////////////////////////////////////////////////
message NG2C_EnterEncompmentResult( NG2C_NPC_MSG_TYPE, NG2C_ENTER_ENCOMPMENT_RESUKT )
{
	
	// 营地编号或游戏编号
	_uint32 encompmentID;

	enum 
	{
	  // 进入营地成功
		ENTER_ENCOMPMENT_RESULT_SUCCESS,
		// 你不是队长
		ENTER_ENCOMPMENT_RESULT_NOTCAPTAIN,
		// 有队员不在范围之内
		ENTER_ENCOMPMENT_RESULT_NOTINAREA,
		// 等级限制，不能开始游戏
		ENTER_ENCOMPMENT_RESULT_LEVELLIMIT,
	};
	
	_byte result; //结果,看上面的枚举值
};

//////////////////////////////////////////////////////////////////////////
// Npc通知玩家有无任务可接或可交
//////////////////////////////////////////////////////////////////////////
message NG2C_NotifyTaskInfo( NG2C_NPC_MSG_TYPE, NG2C_NOTIFY_TASK_INFO )
{
	struct task_info
	{
		_uint32	npc_id;
		//任务标志（1表示有完成的任务可交，2表示有可接的任务）
		_byte	task_flag; 
	};
	vector< task_info > tasks;
};

//////////////////////////////////////////////////////////////////////////
//              组队消息开始
//////////////////////////////////////////////////////////////////////////


// 转发给被邀请人的邀请组队请求
message NG2C_InviteTeamRequest( NG2C_TEAM_MSG_TYPE, NG2C_INVITE_TEAM_REQUEST )
{
	// 邀请人的临时编号
	_uint32 PlayerID;  
	// 邀请人的角色名称
	_string InviterName;
};

// 通知邀请人对方的反应
message NG2C_InviteTeamResponse( NG2C_TEAM_MSG_TYPE, NG2C_INVITE_TEAM_RESPONSE )
{
	// 被邀请人的角色名称
	_string	player_name;
	
	enum
	{
	   // 接受
	   INVITE_TEAM_RESPONSE_ACCEPT,   
	   // 拒绝
	   INVITE_TEAM_RESPONSE_REJEPT,   
	   // 被邀请人不在线
	   INVTIE_TEAM_RESPONSE_OFFLINE,  
	   // 自己已在队伍中
	   INVITE_TEAM_RESPONSE_SELF_INTEAM,
	   // 对方已有队伍
	   INVITE_TEAM_RESPONSE_OTHER_INTEAM,
	};
	
	_byte Tips;  
};


// 通知队员队伍里成员情况
message NG2C_NotifyTeamMember( NG2C_TEAM_MSG_TYPE, NG2C_NOTIFY_TEAM_MEMBER )
{
	
	enum 
	{
	    // 队长
	    TEAM_PRIVILEGE_CAPTAIN,   
	    // 普通
	    TEAM_PRIVILEGE_NORMAL,    
	};

	// 队伍编号
	_uint32 TeamID;   
	// 队伍名称
	_string TeamName;

	struct TeamMemberInfo
	{
	  // 队员临时编号
	  _uint32 MemberTempID;
	  // 队员头像Avatar(可能需要更多，暂未定）
	  _uint32 MemberAvatar;
	  // 队员角色名称
	  _string MemberName;
 
	  // 队伍内的权限
	  _byte MemberPri;
	  
	  // 队员PvE等级
	  _byte  MemberPvELevel;
	}; 
	vector< TeamMemberInfo > TeamMember;
	
};

// 创建队伍相应消息
message NG2C_CreateTeamResponse( NG2C_TEAM_MSG_TYPE, NG2C_CREATE_TEAM_RESPONSE )
{
	enum
	{
	  // 创建成功
	  CREATE_TEAM_RESPONSE_SUCCESS,         
	  // 已在队伍中
	  CREATE_TEAM_RESPONSE_INTEAM,
	  // 队伍名称冲突
	  CREATE_TEAM_RESPONSE_NAME_CONFLICT,
	};
	_byte  Retcode;
};

// 申请加入队伍失败的系统响应
message NG2C_JoinTeamResponse( NG2C_TEAM_MSG_TYPE, NG2C_JOIN_TEAM_RESPONSE )
{
	
	enum
	{
	  // 自己已在一个队伍里了
	  JOIN_TEAM_RESPONSE_INTEAM,
	  // 点选的人并不在一个队伍里
	  JOIN_TEAM_RESPONSE_NOTINTEAM,     
	  // 队伍已满
	  JOIN_TEAM_RESPONSE_FULL,          
	  // 对方不在线
	  JOIN_TEAM_RESPONSE_OFFLINE, 
	  // 队长接受你的加入申请
	  JOIN_TEAM_RESPONSE_ACCEPT,
	  // 队长拒绝了你的加入申请
	  JOIN_TEAM_RESPONSE_REJEPT,      
	};
	
	_byte  RetCode;
};


// 通知队长有人申请加入队伍
message NG2C_JoinTeamNotify( NG2C_TEAM_MSG_TYPE, NG2C_JOIN_TEAM_NOTIFY )
{
	
	// 申请加入的人的临时编号
	_uint32 PlayerID; 
	// 申请加入的人的PvE等级
	_uint32 PlayerPvELevel; 
	// 申请加入的人的角色名称
	_string PlayerName;
};


// 通知申请加入人队长的反应
message NG2C_NotifyTeamJoinResponse( NG2C_TEAM_MSG_TYPE, NG2C_NOTIFY_TEAM_JOIN_RESPONSE )
{
	
	// 队长角色名称
	_string CaptainName;
	
	enum
	{
	  // 队长同意加入
	  NOTIFY_TEAM_JOIN_RESPONSE_ACCEPT,   
	  // 队长拒绝加入
	  NOTIFY_TEAM_JOIN_RESPONSE_REJEPT,
	};
	
	_byte  Tips;
};

// 通知队伍里成员有新成员加入队伍
message NG2C_NotifyNewMemberJoin( NG2C_TEAM_MSG_TYPE, NG2C_NOTIFY_NEW_MEMBER_JOIN )
{
	// 队员临时编号
	_uint32 MemberTempID;
	// 队员头像Avatar(可能需要更多，暂未定）
	_uint32 MemberAvatar;
	// 队员角色名称
	_string MemberName;
	// 队伍内的权限
	_byte  MemberPrivilege;
	// 队员PvE等级
	_byte  MemberPvELevel;
};

// 离开队伍响应
message NG2C_LeaveTeamResponse( NG2C_TEAM_MSG_TYPE, NG2C_LEAVE_TEAM_RESPONSE )
{
	enum
	{
	  // 成功
	  LEAVE_TEAM_RESPONSE_SUCCESS,    
	  // 你不在一个队伍里
	  LEAVE_TEAM_RESPONSE_NOTINTEAM,  
	};
	
	_byte RetCode;
};

// 通知队伍成员有队员离开
message NG2C_NotifyTeamMemberLeave( NG2C_TEAM_MSG_TYPE, NG2C_NOTIFY_TEAM_MEMBER_LEAVE )
{
	// 离开的队员的临时编号
	_uint32 PlayerID;  
	
	enum
	{
	  // 自行离开
	  NOTIFY_TEAM_MEMBER_LEAVE_BYSELF,    
	  // 队长干的
	  NOTIFY_TEAM_MEMBER_LEAVE_BYCAPTAIN, 
	};
	
	_byte   Reason;
};

// 队长踢人的系统回复,给发起人
message NG2C_CaptainKickMemberResponse( NG2C_TEAM_MSG_TYPE, NG2C_CAPTAIN_KICK_MEMBER_RESPONSE )
{
	enum
	{
	  // 成功
	  CAPTAIN_KICK_MEMBER_RESPONSE_SUCCESS,         
	  // 你不在一个队伍内
	  CAPTAIN_KICK_MEMBER_RESPONSE_NOTINTEAM,       
	  // 你不是队长
	  CAPTAIN_KICK_MEMBER_RESPONSE_NOTCAPTAIN,      
	  // 被踢之人不在队伍内
	  CAPTAIN_KICK_MEMBER_RESPONSE_TARGETNOTINTEAM, 
	};
	
	_byte  retcode;
};

// 转发给被邀请人的邀请加入请求
message NG2C_InviteJoinTeamRequest( NG2C_TEAM_MSG_TYPE,  NG2C_INVITE_JOIN_TEAM_REQUEST )
{
	// 队伍名称
	_string  TeamName;
	// 邀请人的角色名称
	_string  InviterName;
	// 邀请人的临时编号
	_uint32 PlayerID;
};


// 通知邀请人对方的反应
message NG2C_InviteJoinTeamResponse( NG2C_TEAM_MSG_TYPE, NG2C_INVITE_JOIN_TEAM_RESPONSE )
{
	// 被邀请人的角色名称
	_string PlayerName;
	
	enum
	{
	  // 接受
	  INVITE_TEAM_RESPONSE_ACCEPT,    
	  // 拒绝
	  INVITE_TEAM_RESPONSE_REJEPT,    
	  // 被邀请人不在线
	  INVITE_TEAM_RESPONSE_OFFLINE,   
	  // 自己不在队伍中
	  INVITE_TEAM_RESPONSE_NOTINTEAM,
	  // 对方已在队伍中
	  INVITE_TEAM_RESPONSE_TARGETINTEAM,
	};
	
	_byte Tips;
};


// 返回大厅队伍列表
message NG2C_LobbyTeamList( NG2C_TEAM_MSG_TYPE, NG2C_LOBBY_TEAM_LIST )
{
	struct TeamInfo
	{
	  // 队伍编号
	  _uint32 TeamID; 
	  // 队伍名称
	  _string TeamName;
	  // 队员个数
	  _byte TeamMemberCount;   
	};
	vector< TeamInfo > TeamList;
};

// 请求队伍详细信息的错误返回
message NG2C_TeamInfoResponse( NG2C_TEAM_MSG_TYPE, NG2C_TEAM_INFO_RESPONSE )
{
	enum
	{
	  // 队伍不存在
	  TEAM_INFO_RESPONSE_TEAMNOTEXIST,    
	};
	
	_uint32 RetCode;
};


// 请求营地地图列表回复
message NG2C_EncompmentMapListResponse( NG2C_ROOM_MSG_TYPE, NG2C_ENCOMPMENT_MAP_LIST_RESPONSE )
{
	enum
	{
	  // 你不是队长
	  ENCOMPMENT_MAP_LIST_RESPONSE_NOTCAPTAIN,
	};

	vector< _uint32 > MapList;
};

// 通知玩家队长选定地图
message NG2C_NotifyMemberChangeMapSetting( NG2C_ROOM_MSG_TYPE, NG2C_NOTIFY_MEMBER_CHANGE_MAP_SETTING )
{
	_uint32 mapid;
};

// 通知玩家队长选地图结束
message NG2C_NotifyMemberSelectMapFinished( NG2C_ROOM_MSG_TYPE, NG2C_NOTIFY_MEMBER_SELECT_MAP_FINISHED )
{
};

// 请求仓库指定页码数据
message NG2C_DepotSpecPageData( NG2C_DEPOT_MSG_TYPE, NG2C_SPEC_PAGE_DATA )
{
	// 页码ID 
	_byte page_id;
	// 页码总数
	_byte total_page_cout;

	// 物品信息 
	struct ware_info
	{
		_uint32 nWareTypeID;	// 物品的具体类型ID 
		_uint32 nCurTimeDroit;	// (以f秒为单位)
		_uint32 nCurST;			// 耐久度
		_uint32 nCurPileupNumber;// 当前队列数量
		_uint16 nPosIdx;		// 此物品的位置索引
		_byte	nTypeID;		// 类型ID， 比如武器、装备、道具、材料
		bool	bUseTimeDroit;	// 是否使用天权 
		bool	bUseST;			// 是否使用耐久度
		bool	bUsePileup;		// 是否使用堆列 
	};
	vector< ware_info > wares;
};

// 请求仓库指定页码不存在 
message NG2C_RequestDepotSpecPageFail( NG2C_DEPOT_MSG_TYPE, NG2C_REQUEST_DEPOT_SPEC_PAGE_FAIL )
{
	// 页码ID 
	_byte page_id;
	// 请求失败
	_byte reason;
	enum 
	{
		page_no_exist,
	};
};
	
// 请求从仓库拖拽物品到背包 
message NG2C_DaggleWareToBagFail( NG2C_DEPOT_MSG_TYPE, NG2C_DAGGLE_WARE_TO_BAG_FAIL )
{
	// 操作失败原因 
	_byte reason;
	enum 
	{
		// 成功吗，可不做处理　	
		RET_SUCCESS,
		
		// 背包类型错误
		RET_BAG_TYPE_NO_EXIST,
		
		// 源物品不存在　
		RET_SRC_WARE_NO_EXIST,
		
		// 仓库物品类型不存在
		RET_DEPOT_WARE_TYPE_NO_EXIST,
		
		// 背包物品类型不存在
		RET_BAG_WARE_TYPE_NO_EXIST,
		
		// 背包已满
		RET_BAG_IS_FULL,
	};
};
 
// 请求从背包拖拽物品到仓库
message NG2C_DaggleWareToDepotFail( NG2C_DEPOT_MSG_TYPE, NG2C_DAGGLE_WARE_TO_DEPOT_FAIL )
{
	// 操作失败原因 
	_byte reason;
	enum 
	{
		// 成功吗，可不做处理　	
		RET_SUCCESS,
		
		// 背包类型错误
		RET_BAG_TYPE_NO_EXIST,
		
		// 源物品不存在　
		RET_SRC_WARE_NO_EXIST,
		
		// 仓库物品类型不存在
		RET_DEPOT_WARE_TYPE_NO_EXIST,
		
		// 背包物品类型不存在
		RET_BAG_WARE_TYPE_NO_EXIST,
		
		// 背包已满
		RET_BAG_IS_FULL,
	};
};
